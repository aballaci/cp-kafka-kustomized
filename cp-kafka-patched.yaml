apiVersion: v1
data:
  jmx-kafka-connect-prometheus.yml: |
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - kafka.connect:type=connect-worker-metrics
    - kafka.connect:type=connect-metrics,client-id=*
    - kafka.connect:type=connector-task-metrics,connector=*,task=*
    rules:
    - pattern : "kafka.connect<type=connect-worker-metrics>([^:]+):"
      name: "cp_kafka_connect_connect_worker_metrics_$1"
    - pattern : "kafka.connect<type=connect-metrics, client-id=([^:]+)><>([^:]+)"
      name: "cp_kafka_connect_connect_metrics_$1_$2"
    - pattern : "kafka.connect<type=connector-task-metrics, connector=([^:]+), task=([^:]+)><>status: ([^:]+)"
      name: "cp_kafka_connect_connect_connector_metrics"
      value: 1
      labels:
        connector: $1
        task: $2
        status: $3
kind: ConfigMap
metadata:
  labels:
    app: cp-kafka-connect
    chart: cp-kafka-connect-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka-connect-jmx-configmap
---
apiVersion: v1
data:
  jmx-kafka-prometheus.yml: |
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - kafka.server:type=ReplicaManager,name=*
    - kafka.controller:type=KafkaController,name=*
    - kafka.server:type=BrokerTopicMetrics,name=*
    - kafka.network:type=RequestMetrics,name=RequestsPerSec,request=*
    - kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent
    - kafka.server:type=ReplicaFetcherManager,name=MaxLag,clientId=*
    - kafka.server:type=KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent
    - kafka.controller:type=ControllerStats,name=*
    - kafka.server:type=SessionExpireListener,name=*
    rules:
    - pattern : kafka.server<type=ReplicaManager, name=(.+)><>(Value|OneMinuteRate)
      name: "cp_kafka_server_replicamanager_$1"
    - pattern : kafka.controller<type=KafkaController, name=(.+)><>Value
      name: "cp_kafka_controller_kafkacontroller_$1"
    - pattern : kafka.server<type=BrokerTopicMetrics, name=(.+)><>OneMinuteRate
      name: "cp_kafka_server_brokertopicmetrics_$1"
    - pattern : kafka.network<type=RequestMetrics, name=RequestsPerSec, request=(.+)><>OneMinuteRate
      name: "cp_kafka_network_requestmetrics_requestspersec_$1"
    - pattern : kafka.network<type=SocketServer, name=NetworkProcessorAvgIdlePercent><>Value
      name: "cp_kafka_network_socketserver_networkprocessoravgidlepercent"
    - pattern : kafka.server<type=ReplicaFetcherManager, name=MaxLag, clientId=(.+)><>Value
      name: "cp_kafka_server_replicafetchermanager_maxlag_$1"
    - pattern : kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>OneMinuteRate
      name: "cp_kafka_kafkarequesthandlerpool_requesthandleravgidlepercent"
    - pattern : kafka.controller<type=ControllerStats, name=(.+)><>OneMinuteRate
      name: "cp_kafka_controller_controllerstats_$1"
    - pattern : kafka.server<type=SessionExpireListener, name=(.+)><>OneMinuteRate
      name: "cp_kafka_server_sessionexpirelistener_$1"
kind: ConfigMap
metadata:
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka-jmx-configmap
---
apiVersion: v1
data:
  jmx-kafka-rest-prometheus.yml: |
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - kafka.rest:type=jetty-metrics
    - kafka.rest:type=jersey-metrics
    rules:
    - pattern : 'kafka.rest<type=jetty-metrics>([^:]+):'
      name: "cp_kafka_rest_jetty_metrics_$1"
    - pattern : 'kafka.rest<type=jersey-metrics>([^:]+):'
      name: "cp_kafka_rest_jersey_metrics_$1"
kind: ConfigMap
metadata:
  labels:
    app: cp-kafka-rest
    chart: cp-kafka-rest-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka-rest-jmx-configmap
---
apiVersion: v1
data:
  jmx-ksql-server-prometheus.yml: |
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - io.confluent.ksql.metrics:type=ksql-engine-query-stats
    rules:
    - pattern : 'io.confluent.ksql.metrics<type=ksql-engine-query-stats>([^:]+):'
      name: "cp_ksql_server_metrics_$1"
kind: ConfigMap
metadata:
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-ksql-server-jmx-configmap
---
apiVersion: v1
data:
  queries.sql: |-
    -- From http://docs.confluent.io/current/ksql/docs/tutorials/basics-docker.html#create-a-stream-and-table

    -- Create a stream pageviews_original from the Kafka topic pageviews, specifying the value_format of DELIMITED
    CREATE STREAM pageviews_original (viewtime bigint, userid varchar, pageid varchar) WITH (kafka_topic='pageviews', value_format='DELIMITED');

    -- Create a table users_original from the Kafka topic users, specifying the value_format of JSON
    CREATE TABLE users_original (registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid VARCHAR) WITH (kafka_topic='users', value_format='JSON', key = 'userid');

    -- Create a persistent query by using the CREATE STREAM keywords to precede the SELECT statement
    CREATE STREAM pageviews_enriched AS SELECT users_original.userid AS userid, pageid, regionid, gender FROM pageviews_original LEFT JOIN users_original ON pageviews_original.userid = users_original.userid;

    -- Create a new persistent query where a condition limits the streams content, using WHERE
    CREATE STREAM pageviews_female AS SELECT * FROM pageviews_enriched WHERE gender = 'FEMALE';

    -- Create a new persistent query where another condition is met, using LIKE
    CREATE STREAM pageviews_female_like_89 WITH (kafka_topic='pageviews_enriched_r8_r9') AS SELECT * FROM pageviews_female WHERE regionid LIKE '%_8' OR regionid LIKE '%_9';

    -- Create a new persistent query that counts the pageviews for each region and gender combination in a tumbling window of 30 seconds when the count is greater than one
    CREATE TABLE pageviews_regions WITH (VALUE_FORMAT='avro') AS SELECT gender, regionid , COUNT(*) AS numusers FROM pageviews_enriched WINDOW TUMBLING (size 30 second) GROUP BY gender, regionid HAVING COUNT(*) > 1;
kind: ConfigMap
metadata:
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-ksql-server-ksql-queries-configmap
---
apiVersion: v1
data:
  jmx-schema-registry-prometheus.yml: |
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - kafka.schema.registry:type=jetty-metrics
    - kafka.schema.registry:type=master-slave-role
    - kafka.schema.registry:type=jersey-metrics
    rules:
    - pattern : 'kafka.schema.registry<type=jetty-metrics>([^:]+):'
      name: "cp_kafka_schema_registry_jetty_metrics_$1"
    - pattern : 'kafka.schema.registry<type=master-slave-role>([^:]+):'
      name: "cp_kafka_schema_registry_master_slave_role"
    - pattern : 'kafka.schema.registry<type=jersey-metrics>([^:]+):'
      name: "cp_kafka_schema_registry_jersey_metrics_$1"
kind: ConfigMap
metadata:
  labels:
    app: cp-schema-registry
    chart: cp-schema-registry-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-schema-registry-jmx-configmap
---
apiVersion: v1
data:
  jmx-zookeeper-prometheus.yml: |
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - org.apache.ZooKeeperService:name0=ReplicatedServer_id*
    - org.apache.ZooKeeperService:name0=ReplicatedServer_id*,name1=replica.*
    - org.apache.ZooKeeperService:name0=ReplicatedServer_id*,name1=replica.*,name2=*
    - org.apache.ZooKeeperService:name0=ReplicatedServer_id*,name1=replica.*,name2=*,name3=*
    rules:
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(\\w+)"
      name: "cp_zookeeper_$2"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+)><>(\\w+)"
      name: "cp_zookeeper_$3"
      labels:
        replicaId: "$2"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(\\w+)"
      name: "cp_zookeeper_$4"
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+), name3=(\\w+)><>(\\w+)"
      name: "cp_zookeeper_$4_$5"
      labels:
        replicaId: "$2"
        memberType: "$3"
kind: ConfigMap
metadata:
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-zookeeper-jmx-configmap
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cp-control-center
    chart: cp-control-center-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-control-center
spec:
  ports:
  - name: cc-http
    port: 9021
  selector:
    app: cp-control-center
    my-label: dev-kafka
    release: confluent
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cp-kafka-connect
    chart: cp-kafka-connect-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka-connect
spec:
  ports:
  - name: kafka-connect
    port: 8083
  selector:
    app: cp-kafka-connect
    my-label: dev-kafka
    release: confluent
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka-headless
spec:
  clusterIP: None
  ports:
  - name: broker
    port: 9092
  selector:
    app: cp-kafka
    my-label: dev-kafka
    release: confluent
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cp-kafka-rest
    chart: cp-kafka-rest-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka-rest
spec:
  ports:
  - name: rest-proxy
    port: 8082
  selector:
    app: cp-kafka-rest
    my-label: dev-kafka
    release: confluent
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka
spec:
  ports:
  - name: broker
    port: 9092
  selector:
    app: cp-kafka
    my-label: dev-kafka
    release: confluent
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-ksql-server
spec:
  ports:
  - name: ksql-server
    port: 8088
  selector:
    app: cp-ksql-server
    my-label: dev-kafka
    release: confluent
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cp-schema-registry
    chart: cp-schema-registry-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-schema-registry
spec:
  ports:
  - name: schema-registry
    port: 8081
  selector:
    app: cp-schema-registry
    my-label: dev-kafka
    release: confluent
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-zookeeper-headless
spec:
  clusterIP: None
  ports:
  - name: server
    port: 2888
  - name: leader-election
    port: 3888
  selector:
    app: cp-zookeeper
    my-label: dev-kafka
    release: confluent
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-zookeeper
spec:
  ports:
  - name: client
    port: 2181
  selector:
    app: cp-zookeeper
    my-label: dev-kafka
    release: confluent
  type: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cp-control-center
    chart: cp-control-center-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-control-center
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-control-center
      my-label: dev-kafka
      release: confluent
  template:
    metadata:
      annotations:
        prometheus.io/port: "5556"
        prometheus.io/scrape: "true"
      labels:
        app: cp-control-center
        my-label: dev-kafka
        release: confluent
    spec:
      containers:
      - env:
        - name: CONTROL_CENTER_BOOTSTRAP_SERVERS
          value: PLAINTEXT://confluent-cp-kafka-headless:9092
        - name: CONTROL_CENTER_ZOOKEEPER_CONNECT
          value: null
        - name: CONTROL_CENTER_CONNECT_CLUSTER
          value: http://confluent-cp-kafka-connect:8083
        - name: CONTROL_CENTER_KSQL_URL
          value: http://confluent-cp-ksql-server:8088
        - name: CONTROL_CENTER_KSQL_ADVERTISED_URL
          value: http://confluent-cp-ksql-server:8088
        - name: CONTROL_CENTER_SCHEMA_REGISTRY_URL
          value: http://confluent-cp-schema-registry:8081
        - name: KAFKA_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: CONTROL_CENTER_REPLICATION_FACTOR
          value: "3"
        image: confluentinc/cp-enterprise-control-center:5.5.0
        imagePullPolicy: IfNotPresent
        name: cp-control-center
        ports:
        - containerPort: 9021
          name: cc-http
          protocol: TCP
        resources: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cp-kafka-connect
    chart: cp-kafka-connect-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka-connect
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-kafka-connect
      my-label: dev-kafka
      release: confluent
  template:
    metadata:
      annotations:
        prometheus.io/port: "5556"
        prometheus.io/scrape: "true"
      labels:
        app: cp-kafka-connect
        my-label: dev-kafka
        release: confluent
    spec:
      containers:
      - command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-kafka-connect/jmx-kafka-connect-prometheus.yml
        image: solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143
        imagePullPolicy: IfNotPresent
        name: prometheus-jmx-exporter
        ports:
        - containerPort: 5556
        resources: {}
        volumeMounts:
        - mountPath: /etc/jmx-kafka-connect
          name: jmx-config
      - env:
        - name: CONNECT_REST_ADVERTISED_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CONNECT_BOOTSTRAP_SERVERS
          value: PLAINTEXT://confluent-cp-kafka-headless:9092
        - name: CONNECT_GROUP_ID
          value: confluent
        - name: CONNECT_CONFIG_STORAGE_TOPIC
          value: confluent-cp-kafka-connect-config
        - name: CONNECT_OFFSET_STORAGE_TOPIC
          value: confluent-cp-kafka-connect-offset
        - name: CONNECT_STATUS_STORAGE_TOPIC
          value: confluent-cp-kafka-connect-status
        - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
          value: http://confluent-cp-schema-registry:8081
        - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
          value: http://confluent-cp-schema-registry:8081
        - name: KAFKA_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
          value: "3"
        - name: CONNECT_INTERNAL_KEY_CONVERTER
          value: org.apache.kafka.connect.json.JsonConverter
        - name: CONNECT_INTERNAL_VALUE_CONVERTER
          value: org.apache.kafka.connect.json.JsonConverter
        - name: CONNECT_KEY_CONVERTER
          value: io.confluent.connect.avro.AvroConverter
        - name: CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE
          value: "false"
        - name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
          value: "3"
        - name: CONNECT_PLUGIN_PATH
          value: /usr/share/java,/usr/share/confluent-hub-components,/usr/local/share/kafka/plugins
        - name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
          value: "3"
        - name: CONNECT_VALUE_CONVERTER
          value: io.confluent.connect.avro.AvroConverter
        - name: CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE
          value: "false"
        - name: KAFKA_JMX_PORT
          value: "5555"
        image: confluentinc/cp-kafka-connect:5.5.0
        imagePullPolicy: IfNotPresent
        name: cp-kafka-connect-server
        ports:
        - containerPort: 8083
          name: kafka-connect
          protocol: TCP
        - containerPort: 5555
          name: jmx
        resources: {}
        volumeMounts:
        - mountPath: /usr/share/java/kafka-connect-jdbc/mysql-connector-java-5.1.6.jar
          name: custom-connector-libs
      volumes:
      - hostPath:
          path: /host_mnt/c/develop/kube/confulent-kustom/cp-helm-charts/custom-connector-libs/mysql-connector-java-5.1.6.jar
          type: File
        name: custom-connector-libs
      - configMap:
          name: confluent-cp-kafka-connect-jmx-configmap
        name: jmx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cp-kafka-rest
    chart: cp-kafka-rest-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka-rest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-kafka-rest
      my-label: dev-kafka
      release: confluent
  template:
    metadata:
      annotations:
        prometheus.io/port: "5556"
        prometheus.io/scrape: "true"
      labels:
        app: cp-kafka-rest
        my-label: dev-kafka
        release: confluent
    spec:
      containers:
      - command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-kafka-rest/jmx-kafka-rest-prometheus.yml
        image: solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143
        imagePullPolicy: IfNotPresent
        name: prometheus-jmx-exporter
        ports:
        - containerPort: 5556
        resources: {}
        volumeMounts:
        - mountPath: /etc/jmx-kafka-rest
          name: jmx-config
      - env:
        - name: KAFKA_REST_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_REST_ZOOKEEPER_CONNECT
          value: confluent-cp-zookeeper-headless:2181
        - name: KAFKA_REST_SCHEMA_REGISTRY_URL
          value: http://confluent-cp-schema-registry:8081
        - name: KAFKAREST_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: KAFKA_REST_JMX_PORT
          value: "5555"
        image: confluentinc/cp-kafka-rest:5.5.0
        imagePullPolicy: IfNotPresent
        name: cp-kafka-rest-server
        ports:
        - containerPort: 8082
          name: rest-proxy
          protocol: TCP
        - containerPort: 5555
          name: jmx
        resources: {}
      volumes:
      - configMap:
          name: confluent-cp-kafka-rest-jmx-configmap
        name: jmx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-ksql-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-ksql-server
      my-label: dev-kafka
      release: confluent
  template:
    metadata:
      annotations:
        prometheus.io/port: "5556"
        prometheus.io/scrape: "true"
      labels:
        app: cp-ksql-server
        my-label: dev-kafka
        release: confluent
    spec:
      containers:
      - command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-ksql-server/jmx-ksql-server-prometheus.yml
        image: solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143
        imagePullPolicy: IfNotPresent
        name: prometheus-jmx-exporter
        ports:
        - containerPort: 5556
        resources: {}
        volumeMounts:
        - mountPath: /etc/jmx-ksql-server
          name: jmx-config
      - env:
        - name: KSQL_BOOTSTRAP_SERVERS
          value: PLAINTEXT://confluent-cp-kafka-headless:9092
        - name: KSQL_KSQL_SERVICE_ID
          value: confluent
        - name: KSQL_KSQL_SCHEMA_REGISTRY_URL
          value: http://confluent-cp-schema-registry:8081
        - name: KSQL_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: KSQL_LISTENERS
          value: http://0.0.0.0:8088
        - name: KSQL_JMX_PORT
          value: "5555"
        image: confluentinc/cp-ksqldb-server:5.5.0
        imagePullPolicy: IfNotPresent
        name: cp-ksql-server
        ports:
        - containerPort: 8088
          name: server
          protocol: TCP
        - containerPort: 5555
          name: jmx
        resources: {}
        volumeMounts: null
      volumes:
      - configMap:
          name: confluent-cp-ksql-server-jmx-configmap
        name: jmx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cp-schema-registry
    chart: cp-schema-registry-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-schema-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-schema-registry
      my-label: dev-kafka
      release: confluent
  template:
    metadata:
      annotations:
        prometheus.io/port: "5556"
        prometheus.io/scrape: "true"
      labels:
        app: cp-schema-registry
        my-label: dev-kafka
        release: confluent
    spec:
      containers:
      - command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-schema-registry/jmx-schema-registry-prometheus.yml
        image: solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143
        imagePullPolicy: IfNotPresent
        name: prometheus-jmx-exporter
        ports:
        - containerPort: 5556
        resources: {}
        volumeMounts:
        - mountPath: /etc/jmx-schema-registry
          name: jmx-config
      - env:
        - name: SCHEMA_REGISTRY_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SCHEMA_REGISTRY_LISTENERS
          value: http://0.0.0.0:8081
        - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
          value: PLAINTEXT://confluent-cp-kafka-headless:9092
        - name: SCHEMA_REGISTRY_KAFKASTORE_GROUP_ID
          value: confluent
        - name: SCHEMA_REGISTRY_MASTER_ELIGIBILITY
          value: "true"
        - name: SCHEMA_REGISTRY_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: JMX_PORT
          value: "5555"
        image: confluentinc/cp-schema-registry:5.5.0
        imagePullPolicy: IfNotPresent
        name: cp-schema-registry-server
        ports:
        - containerPort: 8081
          name: schema-registry
          protocol: TCP
        - containerPort: 5555
          name: jmx
        resources: {}
      volumes:
      - configMap:
          name: confluent-cp-schema-registry-jmx-configmap
        name: jmx-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-kafka
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  selector:
    matchLabels:
      app: cp-kafka
      my-label: dev-kafka
      release: confluent
  serviceName: confluent-cp-kafka-headless
  template:
    metadata:
      annotations:
        prometheus.io/port: "5556"
        prometheus.io/scrape: "true"
      labels:
        app: cp-kafka
        my-label: dev-kafka
        release: confluent
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cp-kafka
                - key: release
                  operator: In
                  values:
                  - confluent
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-kafka/jmx-kafka-prometheus.yml
        image: solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143
        imagePullPolicy: IfNotPresent
        name: prometheus-jmx-exporter
        ports:
        - containerPort: 5556
        resources: {}
        volumeMounts:
        - mountPath: /etc/jmx-kafka
          name: jmx-config
      - command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.confluent-cp-kafka-headless.${POD_NAMESPACE}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: confluent-cp-zookeeper-headless:2181
        - name: KAFKA_LOG_DIRS
          value: /opt/kafka/data-0/logs
        - name: KAFKA_METRIC_REPORTERS
          value: io.confluent.metrics.reporter.ConfluentMetricsReporter
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: PLAINTEXT://confluent-cp-kafka-headless:9092
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "3"
        - name: KAFKA_JMX_PORT
          value: "5555"
        image: confluentinc/cp-enterprise-kafka:5.5.0
        imagePullPolicy: IfNotPresent
        name: cp-kafka-broker
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 5555
          name: jmx
        resources: {}
        volumeMounts:
        - mountPath: /opt/kafka/data-0
          name: datadir-0
      volumes:
      - configMap:
          name: confluent-cp-kafka-jmx-configmap
        name: jmx-config
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        my-label: dev-kafka
      name: datadir-0
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-zookeeper
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  selector:
    matchLabels:
      app: cp-zookeeper
      my-label: dev-kafka
      release: confluent
  serviceName: confluent-cp-zookeeper-headless
  template:
    metadata:
      annotations:
        prometheus.io/port: "5556"
        prometheus.io/scrape: "true"
      labels:
        app: cp-zookeeper
        my-label: dev-kafka
        release: confluent
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cp-zookeeper
                - key: release
                  operator: In
                  values:
                  - confluent
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-zookeeper/jmx-zookeeper-prometheus.yml
        image: solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143
        imagePullPolicy: IfNotPresent
        name: prometheus-jmx-exporter
        ports:
        - containerPort: 5556
        resources: {}
        volumeMounts:
        - mountPath: /etc/jmx-zookeeper
          name: jmx-config
      - command:
        - bash
        - -c
        - |
          ZK_FIX_HOST_REGEX="s/${HOSTNAME}\.[^:]*:/0.0.0.0:/g"
          ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) \
          ZOOKEEPER_SERVERS=`echo $ZOOKEEPER_SERVERS | sed -e "$ZK_FIX_HOST_REGEX"` \
          /etc/confluent/docker/run
        env:
        - name: KAFKA_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: KAFKA_JMX_PORT
          value: "5555"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        - name: ZOOKEEPER_SYNC_LIMIT
          value: "5"
        - name: ZOOKEEPER_INIT_LIMIT
          value: "10"
        - name: ZOOKEEPER_MAX_CLIENT_CNXNS
          value: "60"
        - name: ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
          value: "3"
        - name: ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
          value: "24"
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_SERVERS
          value: confluent-cp-zookeeper-0.confluent-cp-zookeeper-headless.development:2888:3888;confluent-cp-zookeeper-1.confluent-cp-zookeeper-headless.development:2888:3888;confluent-cp-zookeeper-2.confluent-cp-zookeeper-headless.development:2888:3888
        - name: ZOOKEEPER_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: confluentinc/cp-zookeeper:5.5.0
        imagePullPolicy: IfNotPresent
        name: cp-zookeeper-server
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        - containerPort: 5555
          name: jmx
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/zookeeper/data
          name: datadir
        - mountPath: /var/lib/zookeeper/log
          name: datalogdir
      volumes:
      - configMap:
          name: confluent-cp-zookeeper-jmx-configmap
        name: jmx-config
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        my-label: dev-kafka
      name: datadir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
  - metadata:
      labels:
        my-label: dev-kafka
      name: datalogdir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    heritage: Helm
    my-label: dev-kafka
    release: confluent
  name: confluent-cp-zookeeper-pdb
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: cp-zookeeper
      my-label: dev-kafka
      release: confluent
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    my-label: dev-kafka
  name: confluent-canary
spec:
  containers:
  - command:
    - sh
    - -c
    - |
      # Delete the topic if it exists
      kafka-topics --zookeeper confluent-cp-zookeeper-headless:2181 --topic confluent-cp-kafka-canary-topic --delete --if-exists
      # Create the topic
      kafka-topics --zookeeper confluent-cp-zookeeper-headless:2181 --topic confluent-cp-kafka-canary-topic --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list confluent-cp-kafka:9092 --topic confluent-cp-kafka-canary-topic && \
      # Consume a test message from the topic
      kafka-console-consumer --bootstrap-server confluent-cp-kafka-headless:9092 --topic confluent-cp-kafka-canary-topic --from-beginning --timeout-ms 2000 | grep "$MESSAGE"
    image: confluentinc/cp-enterprise-kafka:5.5.0
    imagePullPolicy: IfNotPresent
    name: confluent-canary
  restartPolicy: Never
